function create(__helpers) {
  var str = __helpers.s,
      empty = __helpers.e,
      notEmpty = __helpers.ne,
      __loadTemplate = __helpers.l,
      ___template_marko = __loadTemplate(require.resolve("../template.marko"), require),
      ___partials_header_marko = __loadTemplate(require.resolve("../partials/header.marko"), require),
      __renderer = __helpers.r,
      ______node_modules_marko_node_modules_marko_layout_use_tag_js = __renderer(require("marko/node_modules/marko-layout/use-tag")),
      __tag = __helpers.t,
      ______node_modules_marko_node_modules_marko_layout_put_tag_js = __renderer(require("marko/node_modules/marko-layout/put-tag")),
      escapeXml = __helpers.x,
      forEach = __helpers.f,
      attr = __helpers.a;

  return function render(data, out) {
    __tag(out,
      ______node_modules_marko_node_modules_marko_layout_use_tag_js,
      {
        "template": ___template_marko,
        "getContent": function(__layoutHelper) {
          __tag(out,
            ______node_modules_marko_node_modules_marko_layout_put_tag_js,
            {
              "into": "title",
              "layout": __layoutHelper
            },
            function(out) {
              out.w(escapeXml(data.title));
            });
          __tag(out,
            ______node_modules_marko_node_modules_marko_layout_put_tag_js,
            {
              "into": "css",
              "layout": __layoutHelper
            },
            function(out) {
              out.w('<link href="vendor/pikaday/css/pikaday.css" rel="stylesheet">');
            });
          __tag(out,
            ______node_modules_marko_node_modules_marko_layout_put_tag_js,
            {
              "into": "body",
              "layout": __layoutHelper
            },
            function(out) {
              out.w('<div class="container"><div class="row"><div class="col-md-12">');
              __helpers.i(out, ___partials_header_marko, {"isAuth": data.isAuth, "title": data.title});

              out.w('</div></div><div class="row"><div class="col-md-6"><button class="btn btn-block btn-success btn-block">Incasso</button></div><div class="col-md-6"><button class="btn btn-block btn-danger btn-block">Spesa</button></div></div><div class="row"><div class="col-md-6"><div id="categoryModal" class="modal fade" tabindex="-1" role="dialog"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Aggiungi nuova categoria</h4></div><div class="modal-body"><form action="/login" method="get" id="newCategoryForm"><div class="alert alert-danger formErrors"><ul><li>Errore form</li><li>Errore form</li></ul></div><div class="form-group"><label for="exampleInputEmail1">Nome categoria</label><input type="input" class="form-control" name="name" placeholder="Categoria"></div><div class="form-group"><label for="exampleInputPassword1">Tags (separati da virgola)</label><input type="input" class="form-control" name="tags" placeholder="Tags"></div><div class="form-group"><label for="exampleInputPassword1">Detrazione (es. 0.5)</label><input type="input" class="form-control" name="detractionAmount" placeholder="Detrazione"></div><div class="checkbox"><label><input type="checkbox" name="beneStrumentale" value="true"> Bene strumentale</label></div><button type="submit" class="btn btn-success">Aggiungi</button></form></div><div class="modal-footer"><button type="button" class="btn btn-default btn-block" data-dismiss="modal">Close</button></div></div></div></div><div id="editTransModal" class="modal fade" tabindex="-1" role="dialog"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Modifica entry</h4></div><div class="modal-body"></div><div class="modal-footer"><button type="button" class="btn btn-default btn-block" data-dismiss="modal">Close</button></div></div></div></div><form action="expense" method="post" id="expense"><h2>Aggiungi spesa</h2><div class="alert alert-danger formErrors"><ul><li>Errore form</li><li>Errore form</li></ul></div><div class="form-group"><label for="exampleInputEmail1">Importo</label><input type="text" class="form-control" name="amount" placeholder="Importo"></div><div class="form-group"><div class="form-group"><label for="exampleInputEmail1">Condiviso con...</label><br><input type="text" class="form-control" name="shared" id="nomeCondiviso" placeholder="nome"></div><div class="sharedDett"><div class="form-group"><label for="exampleInputEmail1">Paid by me</label><input type="text" class="form-control" name="paidByMe" value="0"></div><div class="form-group"><label for="exampleInputEmail1">Paid by other</label><input type="text" class="form-control" name="paidByOther" value="0"></div></div></div><div class="form-group"><label for="exampleInputEmail1">Descr</label><textarea class="form-control" name="description" rows="3"></textarea></div><div class="form-group"><label for="exampleInputEmail1">Data</label><input type="text" class="form-control" name="date" id="expenseDate" placeholder="Data"></div><div class="form-group categoryWrap"><label for="exampleInputEmail1">Categoria</label><br><input type="text" class="form-control" name="category" id="category" placeholder="categoria"></div><div class="form-group"><label for="exampleInputEmail1">Reale/Fake</label><br><div class="btn-group realFakeWrap" role="group" aria-label="..."><button type="button" data-type="real" class="btn btn-default btn-checkbox selected">Reale</button><button type="button" data-type="fake" class="btn btn-default btn-checkbox">Simulazione</button></div></div><div class="form-group"><button class="btn btn-block btn-danger" type="submit">Aggiungi spesa</button></div></form></div><div class="col-md-6"><form action="income" method="post" id="income"><h2>Aggiungi incasso</h2><div class="alert alert-danger formErrors"><ul><li>Errore form</li><li>Errore form</li></ul></div><div class="form-group"><label for="exampleInputEmail1">Importo</label><input type="text" class="form-control" name="amount" placeholder="Importo"></div><div class="form-group"><label for="exampleInputEmail1">Data</label><input type="text" class="form-control" name="date" id="incomeDate" placeholder="Data"></div><div class="form-group"><label for="exampleInputEmail1">Descr</label><textarea class="form-control" name="description" rows="3"></textarea></div><div class="form-group"><label for="exampleInputEmail1">Reale/Simulato</label><br><div class="btn-group" role="group" aria-label="..."><button type="button" data-type="real" class="btn btn-default btn-checkbox selected">Reale</button><button type="button" data-type="fake" class="btn btn-default btn-checkbox">Simulazione</button></div></div><div class="form-group"><button class="btn btn-block btn-success" type="submit">Aggiungi incasso</button></div></form></div></div><div class="row"><div class="col-md-12"><div class="filters"><form action method="get" id="filters"><div class="form-group"><label for="exampleInputEmail1">Anno</label><select class="form-control" name="year">');

              forEach(data.years, function(year) {
                out.w('<option' +
                  attr("value", year.date) +
                  '>' +
                  escapeXml(year.date) +
                  '</option>');
              });

              out.w('</select></div><div class="form-group"><label for="exampleInputEmail1">nr of records to display</label><input type="text" class="form-control" name="nr" placeholder="nr" value="5"></div></form></div><div class="row"><div class="col-md-6"><button class="btn btn-block btn-danger outline" id="deleteFake">Delete all fake of current period</button></div><div class="col-md-6"><button class="btn btn-block btn-danger outline" id="deleteAllFake">Delete all fake</button></div></div><table id="results" class="table table-striped"><thead><tr><td>Data</td><td>Importo</td><td>Categoria</td><td>Descr</td><td></td><td></td></tr><tr class="sample"><td class="data">01/02/2015</td><td class="amount">15.00\u20ac</td><td class="category">Elettronica</td><td class="description">Descrizione del tipo di acquisto...</td><td class="sharedWith">io: <span class="paidByMe"></span><br><span class="name"></span>: <span class="paidByOther"></span></td><td class="realFake">sharedwith</td><td><button class="btn btn-block btn-warning editTransaction">Modifica</button></td><td><button class="btn btn-block btn-danger deleteTransaction">Elimina</button></td></tr></thead><tbody><tr><td>01/02/2015</td><td>15.00\u20ac</td><td>Elettronica</td><td>Descrizione del tipo di acquisto...</td><td><button class="btn btn-block btn-warning">Modifica</button></td><td><button class="btn btn-block btn-danger">Elimina</button></td></tr></tbody></table></div></div><div class="row"><div class="col-md-12"><nav><ul class="pagination"><li class="pagPrev"><a href="#" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a></li><li><a href="#" aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li></ul></nav></div></div><div class="row"><div class="col-md-4 summary-real"><h4>Real</h4><strong>Income: </strong><span class="income"></span><br><strong>Expense: </strong><span class="expense"></span><br><strong>Cash Out: </strong><span class="cashOut"></span><br><strong>Balance: </strong><span class="balance"></span></div><div class="col-md-4 summary-fake"><h4>Fake only</h4><strong>Income: </strong><span class="income"></span><br><strong>Expense: </strong><span class="expense"></span><br><strong>Cash Out: </strong><span class="cashOut"></span><br><strong>Balance: </strong><span class="balance"></span></div><div class="col-md-4 summary-realFake"><h4>Real+Fake</h4><strong>Income: </strong><span class="income"></span><br><strong>Expense: </strong><span class="expense"></span><br><strong>Cash Out: </strong><span class="cashOut"></span><br><strong>Balance: </strong><span class="balance"></span></div></div></div>');
            });
          __tag(out,
            ______node_modules_marko_node_modules_marko_layout_put_tag_js,
            {
              "into": "custom-js",
              "layout": __layoutHelper
            },
            function(out) {
              out.w('<script src="/vendor/moment.js"></script><script src="/vendor/pikaday/pikaday.js"></script><script src="/vendor/typeahead.bundle.min.js"></script><script src="vendor/validate/validate.min.js"></script><script>\n            $(function(){\n\n                // TYPEAHEAD SUGGESTIONS HANDLERS\n                // shared with\n                var names = new Bloodhound({\n                  datumTokenizer: Bloodhound.tokenizers.obj.whitespace(\'name\'),\n                  queryTokenizer: Bloodhound.tokenizers.whitespace,\n                  remote: {\n                    url: \'/finance/sharer/%QUERY.json\',\n                    wildcard: \'%QUERY\'\n                  }\n                });\n                $(\'#nomeCondiviso\').typeahead({\n                  hint: true,\n                  highlight: true,\n                  minLength: 1\n                },\n                {\n                  name: \'merda\',\n                  display: \'name\',\n                  source: names,\n                  templates: {\n                    header: showTooltip,\n                    notFound: showTooltip\n                  }\n                });\n\n                // devo usare questo altrimenti quando nel box non c\'e\' scritto nulla il typeahead non viene nemmeno chiamato, e mi serve per nascondere i campi relativi agli importi condivisi\n                $(\'#nomeCondiviso\').on(\'keyup\', function(ev){\n                    if ($(this).val() === \'\'){\n                        var sample = {\n                            query: \'\'\n                        }\n                        showTooltip(sample);\n                    }\n                })\n                // funzione per capire se ci sono suggestions uguali alla query digitata, nel caso non ci fossero viene mostrato un tooltip che dice che il nome digitato verra\' aggiunto\n                // la funzione viene chiamata dal templates:{} e non da .on(event) perche\' e\' l\'unico modo per farla triggerare ad ogni tasto premuto\n                function showTooltip(data){\n                    var exists = false;\n                    \n                    if (data.query.trim() !== \'\'){\n                        var halfAmount = parseFloat($(\'#expense [name="amount"]\').val())/2;\n                        $(\'#expense [name="paidByMe"], #expense [name="paidByOther"]\').val(function(){\n                            return halfAmount;\n                        });\n                        $(\'.sharedDett\').slideDown(150);\n                    }else{\n                        $(\'.sharedDett\').slideUp(150);\n                        return $(\'#expense [name="paidByMe"], #expense [name="paidByOther"]\').val(\'0\');\n                    }\n\n                    if (data.suggestions){\n                        for (var i=0; i<data.suggestions.length; i++){\n                            if (data.query.trim() === data.suggestions[i].name){\n                                exists = true;\n                            }\n                        }\n                    }\n                    if (!exists){\n                        $(\'#nomeCondiviso\').tooltip({\n                            title: data.query + \' verra aggiunto\'\n                        })\n                        $(\'#nomeCondiviso\').tooltip(\'show\');\n                        setTimeout(function(){\n                            $(\'#nomeCondiviso\').tooltip(\'destroy\');\n                        }, 1500);\n                    }\n                    return \'\';\n                }\n\n                // categories\n                var categories = new Bloodhound({\n                  datumTokenizer: Bloodhound.tokenizers.obj.whitespace(\'name\'),\n                  queryTokenizer: Bloodhound.tokenizers.whitespace,\n                  remote: {\n                    url: \'/finance/category/%QUERY.json\',\n                    wildcard: \'%QUERY\',\n                    // devo usare questa funzione per modificare la stringa che viene mandata lato server per mostrare i risultati del typeahead\n                    prepare: function(query, settings){\n                        // appena clicco sulla casella il suo contenuto e\' vuoto, quindi il server darebbe errore perche\' viene chiamato /finance/category/.json allora io forzo la scritta showmeeverythingyougot.json e lato server faccio in modo di usare questa stringa per inviare una ricerca con nome vuoto in modo da mostrare tutti i record che ci sono \n                        var newQ = (query.trim() === \'\') ? \'showmeeverythingyougot\' : query;\n                        // la funzione deve ritornare un settings fatto cosi\n                        var settings = {\n                            url: "/finance/category/" + newQ + ".json",\n                            type: "GET",\n                            dataType: "json"\n                        }\n                        return settings;\n                    }\n                  }\n                });\n                $(\'#category\').typeahead({\n                  hint: true,\n                  highlight: true,\n                  // le categories le faccio vedere appena uno mette il mouse sopra\n                  minLength: 0\n                },\n                {\n                  name: \'category\',\n                  display: function (data){\n                    // potrei ritornare anche una cosa piu\' complessa, che pero\' diventerebbe il mio value della inputbox es.\n                    // return data.name + \'(\' + data.detractionAmount + \')\';\n                    return data.name;\n                  },\n                  source: categories,\n                  templates: {\n                    // se notFound fa vedere un entry che chiede di aggiungere quel nome a categoria\n                    notFound: function(data){\n                        return \'<div id="newCategory" class="tt-suggestion"><i class="fa fa-plus-square-o"></i> Aggiungi categoria <strong>\' + data.query + \'</strong></div>\';\n                    },\n                    suggestion: function (data){\n                        return \'<div><strong>\' + data.name + \'</strong> (-\' + data.detractionAmount*100 + \'%)</div>\'\n                    },\n                    header: function(data){\n                        // se quanto scritto nella inputbox coincide con l\'unico suggerimento dato, vuol dire che ha scritto il nome esatto di una categoria, quindi non mostro il messaggio di inserimento nuova categoria\n                        if (data.suggestions.length === 1 && data.suggestions[0].name === data.query){\n                            return \'\';\n                        }else{\n                            return \'<div id="newCategory" class="tt-suggestion"><i class="fa fa-plus-square-o"></i> Aggiungi categoria <strong>\' + data.query + \'</strong></div>\';\n                        }\n                    }\n                  }\n\n                });\n\n                // addNewCategory typeahead button handler\n                $(\'.categoryWrap\').on(\'click\', \'#newCategory\', function(ev){\n                    var target = $(\'#categoryModal\');\n                    target.find(\'[name="name"]\').val(function(){\n                        return $("#category").val();\n                    });\n                    target.modal(\'show\');\n                    \n                })\n                // triggers on categoryModal hide and show complete\n                $(\'#categoryModal\').on(\'hidden.bs.modal\', function (e) {\n                    $(\'#newCategoryForm\').find(\':submit\')\n                                    .removeClass(\'disabled\')\n                                    .removeClass(\'btn-warning\')\n                                    .addClass(\'btn-default\')\n                                    .text(\'Aggiungi\');\n                }).on(\'shown.bs.modal\', function(e){\n                    $(this).find(\'[name="tags"]\').focus();\n                })\n\n\n\n                // FORM VALIDATIONS\n                var presenceMsg = \'obbligatoria\';\n                // category\n                var categoryCheck = {\n                  name: {\n                    presence: {\n                        message: presenceMsg\n                    }\n                  },\n                  detractionAmount: {\n                    presence: {\n                        message: presenceMsg\n                    },\n                    numericality: {\n                        greaterThan: 0,\n                        notGreaterThan: \'Il valore deve essere maggiore di 0\',\n                        lessThanOrEqualTo: 1,\n                        notLessThanOrEqualTo: \'Il valore deve essere uguale o inferiore a 1\'\n                    }\n                  }\n                };\n\n                // new category validation\n                $(\'#newCategoryForm\').on(\'submit\', function(ev){\n                    ev.preventDefault();\n                    handleFormSubmit(this,categoryCheck);\n                });\n\n                // Check for errors on the form\n                function handleFormSubmit(form, validation){\n                    var errors = validate(form, validation);\n                    var formElement = $(\'#\' + form.id);\n                    if (!errors)\n                        showSuccess(formElement);\n                    else\n                        showErrors(formElement, errors);\n                }\n\n                // Show errors \n                function showErrors(formElement, errors){\n                    console.log(\'found errors in form\');\n                    // Clean the form from errors\n                    cleanForm(formElement);\n                    // Attach new errors\n                    appendErrors(formElement, errors);\n                }\n\n                // Append errors to form\n                function appendErrors(formElement, errors){\n                    // Cycle all errors\n                    for (error in errors){\n                        // Add error class to form-group\n                        var formGroup = formElement.find(\'[name="\' + error +\'"]\').closest(\'.form-group\');\n                        formGroup.addClass(\'has-error\');\n\n                        // Cycle through the errors and attach error span\n                        var errArr = errors[error];\n                        var errEl = \'<span class="help-block"><ul><li>\' + errArr.join(\'</li><li>\') + \'</li></ul></span>\';\n                        formGroup.append(errEl);\n\n                        console.log(\'aggiunto errore a \' + error + \' il valore sarebbe \' + errors[error]);\n                    }\n                }\n\n                // Removes errors and classes from form\n                function cleanForm(formElement){\n                    // Remove all error styles\n                    formElement.find(\'.has-error\').removeClass(\'has-error\');\n                    // Remove all error messages\n                    formElement.find(\'.help-block\').remove();\n                }\n\n                function showSuccess(formElement){\n                    cleanForm(formElement);\n                    // Send the form to server\n                    var initialText = formElement.find(\':submit\').text();\n\n                    $.ajax({\n                        url: \'/finance/add-category\',\n                        type: \'post\',\n                        dataType: \'json\',\n                        data: {\n                            name: formElement.find(\'[name="name"]\').val(),\n                            // anche se tags lo invio cosi, poi lato server su req.body viene visto come tags[] perche\' di fatto e\' un array\n                            tags: formElement.find(\'[name="tags"]\').val()\n                                    .split(\',\')\n                                    .map(function (el){\n                                        return el.trim()\n                                    }),\n                            detractionAmount: formElement.find(\'[name="detractionAmount"]\').val()\n                        },\n                        beforeSend: function(){\n                            formElement.find(\'.formErrors\').hide();\n                            formElement.find(\':submit\')\n                                .addClass(\'disabled\')\n                                .removeClass(\'btn-default\')\n                                .addClass(\'btn-warning\')\n                                .text(\'Elaborazione in corso...\');\n                        },\n                        success: function(json){\n                            console.log(\'json risposta ajax\', json);\n                            // Check for errors\n                            if (json.errors){\n                                // Append error messages\n                                formElement.find(\'.formErrors ul\').html(\'<li>\' + json.errors.join(\'</li><li>\') + \'</li>\');\n                                // Show error div\n                                formElement.find(\'.formErrors\').slideDown();\n                                    \n                                return false;\n                            }\n                            formElement.find(\':submit\').text(\'Ok categoria aggiunta\');\n                            // hide the modal after 1s\n                            setTimeout(function(){\n                                $(\'#categoryModal\').modal(\'hide\');\n                            }, 1000);\n\n\n                        }\n                    })\n                }\n\n\n\n\n                // IMPORTANTE: CAPIRE COME SCRIVERE JS A MODULI\n                // LINK UTILI:\n                // https://hckr.news/javascript-module-pattern-lets-handle-dom-events/\n                // https://addyosmani.com/largescalejavascript/\n                // https://addyosmani.com/largescalejavascript/\n\n                \n\n\n\n                var loading = {\n                    start: function(target){\n                        $(target).append(\'<div id="overlay"><img id="loading" src="http://bit.ly/pMtW1K"></div>\');\n                    },\n                    end: function(target){\n                        $(target).find(\'#overlay\').remove();\n                    }\n                }\n\n\n                function findVal(parent, name){\n                    return parent.find(\'[name="\' + name + \'"]\').val();\n                }\n\n                function serializeToObj(arr){\n                    var values = {};\n                    for (obj in arr){\n                        var name = arr[obj].name;\n                        var value = arr[obj].value;\n                        values[name] = value;\n                    }\n                    return values;\n                }\n                \n                // Fancy checkbox handler, adds selected class to pressed button\n                $(\'.btn-checkbox\').on(\'click\', function(ev){\n                    $(this).parent().find(\'.btn-checkbox\').removeClass(\'selected\');\n                    $(this).addClass(\'selected\');\n                });\n\n                // Calculates the difference when each sharer has different amount of money\n                $(\'#expense [name="paidByMe"], #expense [name="paidByOther"]\').on(\'blur\', function(ev){\n                    var changed = $(this).attr(\'name\');\n                    var newVal = $(this).val();\n                    var el = [];\n                    $(\'.sharedDett .form-group\').each(function(id,val){\n                        el.push($(this).find(\'input\').attr(\'name\'));\n                    });\n                    var pos = el.indexOf(changed);\n                    el.splice(pos,1);\n                    el.forEach(function(input){\n                        $(\'.sharedDett [name="\' + input + \'"]\').val(function(){\n                            var amount = $(\'#expense [name="amount"]\').val();\n                            return (amount-newVal)/el.length;\n                        });\n                    })\n                })\n\n                // Datepicker init\n                var incomePicker = new Pikaday({ field: document.getElementById(\'incomeDate\') });\n                var expensePicker = new Pikaday({ field: document.getElementById(\'expenseDate\') });\n\n                // Form submit handler\n                $(\'#income, #expense\').on(\'submit\', function(ev){\n                    console.log(\'inviando form\');\n                    ev.preventDefault();\n                    var form = $(this);\n                    var initialText = form.find(\':submit\').text();\n\n                    var formsVal = serializeToObj(form.serializeArray());\n                    formsVal.type = $(this).find(\'.btn-checkbox.selected\').data().type;\n                    console.log(\'formsVal\', formsVal);\n\n                    $.ajax({\n                        url: \'/finance/\' + form.attr(\'action\'),\n                        type: \'POST\',\n                        dataType: \'json\',\n                        data: formsVal,\n                        beforeSend: function(){\n                            form.find(\':submit\').text(\'...\');\n                            form.find(\'.formErrors\').hide();\n                            console.log(\'sending income request\');\n                        },\n                        success: function(json){\n                            if (!json.errors){\n                                form.find(\':submit\').text(\'OK\');\n                            }else{\n                                form.find(\':submit\').text(\'Errore\');\n                                // Append error messages\n                                form.find(\'.formErrors ul\').html(\'<li>\' + json.errors.join(\'</li><li>\') + \'</li>\');\n                                // Show error div\n                                form.find(\'.formErrors\').slideDown();\n                            }\n                            setTimeout(function(){\n                                form.find(\':submit\').text(initialText);\n                                $(\'#editTransModal\').modal(\'hide\');\n                            }, 1000);\n                            console.log(json);\n                        }\n                    })\n                });\n\n                $(\'#filters select, #filters input\').on(\'change\', function(ev){\n                    console.log(\'select changed\');\n                    //ev.preventDefault();\n                    triggerSearch(this);\n                });\n\n                $(\'#filters select\').trigger(\'change\');\n\n                function triggerSearch(el){\n                    var form = $(el).closest(\'form\');\n                    var formsVal = serializeToObj(form.serializeArray());\n                    console.log(\'formsVal\', formsVal);\n                    $.ajax({\n                        url: \'/finance/get-results\',\n                        type: \'get\',\n                        dataType: \'json\',\n                        data: formsVal,\n                        beforeSend: function(){\n                            console.log(\'inviando...\');\n                            loading.start(form);\n                        },\n                        success: function(json){\n                            console.log(\'result filtro\', json);\n                            showResults(json.transactions);\n                            printSummary(json.means);\n                            showPagination(json.count, form.find(\'[name="nr"]\').val());\n                            loading.end(form);\n                        }\n                    })\n                }\n\n                function showPagination(count,limit){\n                    if (limit<count){\n                        $(\'.pagination .dyn\').remove();\n                        var pages = Math.ceil(count/limit);\n                        var pagHtml = \'\';\n                        for (var i=1;i<=pages;i++){\n                            pagHtml += \'<li class="dyn"><a href="#">\' + i + \'</a></li>\';\n                        }\n                        $(\'.pagination .pagPrev\').after(pagHtml);\n                        $(\'.pagination\').show();\n                    }\n                    else\n                        $(\'.pagination\').hide();\n                }\n\n                // Handle pagination\n                $(\'.pagination\').on(\'click\', \'.dyn\', function(ev){\n                    ev.preventDefault();\n\n                    var page = $(this).text();\n                    var form = $(\'#filters\');\n                    var formsVal = serializeToObj(form.serializeArray());\n                    formsVal.page = page;\n\n                    $.ajax({\n                        url: \'/finance/change-page\',\n                        type: \'get\',\n                        dataType: \'json\',\n                        data: formsVal,\n                        beforeSend: function(){\n                            console.log(\'cambiando pagina...\');\n                        },\n                        success: function(json){\n                            console.log(\'json post cambio pagina:\', json);\n                            // Only the table gets updated, not the transactions summary\n                            showResults(json.transactions);\n                        }\n                    });\n                });\n\n                function showResults(results){\n                    // Get sample row\n                    // var row = $(\'#results .sample\').clone();\n                    var final = \'\';\n                    results.forEach(function(result){\n                        var row = $(\'#results .sample\').clone();\n                        row.find(\'.data\').text(moment(result.date).format(\'dd DD MMM YYYY\'));\n                        row.find(\'.amount\').text(result.amount);\n                        row.find(\'.category\').text(result.category);\n                        row.find(\'.description\').text(result.description);\n                        row.find(\'.sharedWith\').text(function(){\n                            if (\'shared\' in result){\n                                if (\'shared\' in result && result.shared.name === \'\')\n                                    return \'\';\n                                row.find(\'.sharedWith .paidByMe\').text(result.shared.paidByMe);\n                                row.find(\'.sharedWith .name\').text(result.shared.name);\n                                row.find(\'.sharedWith .paidByOther\').text(result.shared.paidByOther);\n                            }else\n                                return \'\';\n                        });\n                        row.find(\'.realFake\').text(result.type);\n                        final += \'<tr data-transID="\' + result._id + \'">\';\n                        final += row.html();\n                        final += \'</tr>\';\n                    });\n                    $(\'#results tbody\').html(final);\n                }\n\n                function printSummary(means){\n                    var type = [\'real\', \'fake\', \'realFake\'];\n                    // Print summary for realOnly and fakeOnly transactions\n                    type.forEach(function(type){\n                        var target = $(\'.summary-\' + type);\n                        target.find(\'.income\').text(means[type].income);\n                        target.find(\'.expense\').text(means[type].expense);\n                        target.find(\'.cashOut\').text(means[type].cashOut);\n                        target.find(\'.balance\').text(means[type].income+means[type].expense);\n                    })\n                }\n\n                // Handle remove fake\n                $(\'#deleteFake, #deleteAllFake\').on(\'click\', function(e){\n                    var target = $(this);\n                    var originalText = target.text();\n\n                    // period viene preso solo se deleteFake, altrimenti sono da eliminare tutti gli anni\n                    if (this.id === \'deleteFake\')\n                        var period = $(\'#filters select[name="year"]\').val();\n                    else\n                        var period = \'\'\n\n                    $.ajax({\n                        url: \'/finance/deleteFake\',\n                        type: \'post\',\n                        dataType: \'json\',\n                        data: {\n                            period: period\n                        },\n                        beforeSend: function(){\n                            target.text(\'...deleting\');\n                        },\n                        success: function(json){\n                            if (!json.errors){\n                                target.text(\'OK elementi eliminati\');\n                                // trigger a result refresh\n                                $(\'#filters select\').trigger(\'change\');\n                                setTimeout(function() {\n                                    target.text(originalText);\n                                }, 1000);\n                            }\n                        }\n                    })\n                })\n\n                // Handle remove transaction\n                $(\'#results\').on(\'click\', \'.deleteTransaction\', function(ev){\n                    var row = $(this).closest(\'tr\');\n                    var id = row.data().transid;\n                    var el = $(this);\n                    $.ajax({\n                        url: \'/finance/deleteTransaction\',\n                        type: \'post\',\n                        dataType: \'json\',\n                        data: {\n                            id: id\n                        },\n                        beforeSend: function(){\n                            el.text(\'...\')\n                        },\n                        success: function(json){\n                            row.hide(500, function(){\n                                $(this).remove();\n                            });\n                        }\n                    });\n                });\n\n                // reset form\n                function resetForm(form){\n                    form.find(\'input, textarea\').val(\'\');\n                    form.find(\'.sharedDett\').hide();\n                }\n\n                // Handle edit transaction\n                var originalTarget;\n                $(\'#results\').on(\'click\', \'.editTransaction\', function(ev){\n                    var id = $(this).closest(\'tr\').data().transid;\n                    var target = $(this);\n                    var originalText = target.text();\n                    // get transaction details\n                    $.ajax({\n                        url: \'/finance/getDetails\',\n                        dataType: \'json\',\n                        type: \'get\',\n                        data: {\n                            id: id\n                        },\n                        beforeSend: function(){\n                            target.text(\'...\');\n                        },\n                        success: function(res){\n                            console.log(\'response: \', res);\n                            target.text(originalText);\n                            // controllo se e\' income o expense\n                            if (res.amount > 0){\n                                var form = \'#income\';                                \n                            }\n                            else{\n                                var form = \'#expense\';\n                                // controllo se la spesa e\' condivisa\n                                if (res.shared.name != \'\'){\n                                    $(form + \' [name="shared"]\').val(res.shared.name);\n                                    $(form + \' [name="paidByMe"]\').val(res.shared.paidByMe);\n                                    $(form + \' [name="paidByOther"]\').val(res.shared.paidByOther);\n                                    $(form + \' .sharedDett\').slideDown(150);\n                                }\n                                $(form + \' [name="category"]\').val(res.category[0]);\n                            }\n                            $(form + \' [name="amount"]\').val( Math.abs(res.amount) );\n                            $(form + \' [name="description"]\').val( res.description );\n                            // realfake\n                            $(form + \' .realFakeWrap button\').removeClass(\'selected\');\n                            $(form + \' .realFakeWrap [data-type="\' + res.type + \'"]\').addClass(\'selected\');\n                            // date\n                            $(form + \' [name="date"]\').val( moment(res.date).format(\'YYYY-MM-DD\') );\n\n                            // in questo caso rimuovo il form dalla pagina senza fare il .clone() o prenderne l\'html perche\' altrimenti avrei un duplicato con lo stesso #id, avrei dovuto usare le classi per gestire quel form invece ho sempre usato l\'#id e adesso non ho voglia di cambiare tutto il codice relativo\n                            // inserisco un placeholder prima del form che rimuovo dal body, cosi lo posso usare poi per identificare da dove era stato "staccato" il form\n                            $(form).before(\'<div id="formHolder"></div>\');\n                            var source = $(form).detach();\n                            // change the form target url\n                            originalTarget = source.attr(\'action\');\n                            source.attr(\'action\',\'editTransaction\');\n                            // append the id hidden input\n                            source.append(\'<input type="hidden" value="\' + res._id + \'" name="id">\');\n                            $(\'#editTransModal .modal-body\').append( source );\n                            $(\'#editTransModal\').modal(\'show\');\n                        }\n                    })\n                });\n                $(\'#editTransModal\').on(\'hidden.bs.modal\', function(ev){\n                    resetForm($(this).find(\'form\'));\n                    var source = $(this).find(\'form\').detach();\n                    // delete the temporary id field\n                    source.remove(\'[name="id"]\');\n                    // append to original place\n                    $(\'#formHolder\').after( source );\n                    $(\'#formHolder\').remove();\n                })\n                $(\'#editTransModal\').on(\'shown.bs.modal\', function(ev){\n                    $(this).find(\'[name="amount"]\').focus();\n                })\n\n            })\n        </script>');
            });
        }
      });
  };
}
(module.exports = require("marko").c(__filename)).c(create);